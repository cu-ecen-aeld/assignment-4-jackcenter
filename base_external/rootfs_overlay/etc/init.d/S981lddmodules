#!/bin/sh

load_scull() {
    device="scull"

    echo "Remove any existing /dev node for /dev/${device}"
    rm -f /dev/${device}[0-3]
    mknod /dev/${device}0 c $major 0
    mknod /dev/${device}1 c $major 1
    mknod /dev/${device}2 c $major 2
    mknod /dev/${device}3 c $major 3
    ln -sf ${device}0 /dev/${device}
    chgrp $group /dev/${device}[0-3] 
    chmod $mode  /dev/${device}[0-3]

    echo "Add a nodes for our device at /dev/${device} using mknod"
    rm -f /dev/${device}pipe[0-3]
    mknod /dev/${device}pipe0 c $major 4
    mknod /dev/${device}pipe1 c $major 5
    mknod /dev/${device}pipe2 c $major 6
    mknod /dev/${device}pipe3 c $major 7

    ln -sf ${device}pipe0 /dev/${device}pipe
    chgrp $group /dev/${device}pipe[0-3] 
    chmod $mode  /dev/${device}pipe[0-3]

    rm -f /dev/${device}single
    mknod /dev/${device}single  c $major 8
    chgrp $group /dev/${device}single
    chmod $mode  /dev/${device}single

    rm -f /dev/${device}uid
    mknod /dev/${device}uid   c $major 9
    chgrp $group /dev/${device}uid
    chmod $mode  /dev/${device}uid

    rm -f /dev/${device}wuid
    mknod /dev/${device}wuid  c $major 10
    chgrp $group /dev/${device}wuid
    chmod $mode  /dev/${device}wuid

    rm -f /dev/${device}priv
    mknod /dev/${device}priv  c $major 11
    chgrp $group /dev/${device}priv
    chmod $mode  /dev/${device}priv
}

unload_scull() {
    device="scull"
    
    rm -f /dev/${device} /dev/${device}[0-3] 
    rm -f /dev/${device}priv
    rm -f /dev/${device}pipe /dev/${device}pipe[0-3]
    rm -f /dev/${device}single
    rm -f /dev/${device}uid
    rm -f /dev/${device}wuid
}

load_module() {
    if [ $# -ne 1 ]; then
	    echo "Wrong number of arguments"
	    echo "usage: load_module module_name"
	    echo "Will create a corresponding device /dev/module_name associated with module_name.ko"
	    exit 1
    fi

    module=$1
    # Use the same name for the device as the name used for the module
    device=$1
    # Support read/write for owner and group, read only for everyone using 644
    mode="664"

    echo "Loading kernel module: $module"

    modprobe "$module" || { echo "Failed to load $module.ko"; exit 1; }
    echo "$module loaded successfully"

    echo "Retrieve major number"
    major=$(awk "\$2==\"$module\" {print \$1}" /proc/devices)
    if [ -z "$major" ]; then
        echo "No device found in /proc/devices for driver ${module} (this driver may not allocate a device)"
        exit 1
    fi

    if [ "$module" == "scull" ]; then
        load_scull
    else
        echo "Remove any existing /dev node for /dev/${device}"
        rm -f /dev/${device}

        echo "Add a node for our device at /dev/${device} using mknod"
        mknod /dev/${device} c $major 0

        echo "Change group owner to ${group}"
        chgrp $group /dev/${device}

        echo "Change access mode to ${mode}"
        chmod $mode  /dev/${device}
    fi
}

unload_module() {
    if [ $# -ne 1 ]; then
	    echo "Wrong number of arguments"
	    echo "usage: unload_module module_name"
	    echo "Will unload the module specified by module_name and remove assocaited device"
	    exit 1
    fi

    module=$1
    device=$1

    echo "Unoading kernel module: $module"

    # invoke rmmod with all arguments we got
    modprobe -r $module || { echo "Failed to unload $module.ko"; exit 1; }

    # Remove stale nodes
    if [ "$module" == "scull" ]; then
        unload_scull
    else
        rm -f /dev/${device}
    fi
}

script_name="$0"
argument="$1"

# Group: since distributions do it differently, look for wheel or use staff
if grep -q '^staff:' /etc/group; then
    group="staff"
else
    group="wheel"
fi 

if ! [ $# -eq 1 ]
then
    echo "Usage: ${0} {start|stop}"
    exit 1
fi

case "$1" in
    start)
        load_module scull
        load_module faulty
        load_module hello
        ;;
    stop)
        unload_module scull
        unload_module faulty
        unload_module hello
        ;;
    *)
        echo "Usage: ${0} {start|stop}"
        exit 1
        ;;
esac
    